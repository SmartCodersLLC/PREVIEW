var app;(()=>{var e={38:(e,t,s)=>{s(142).config();const a=process.env.DBTYPE;if("MS"===a){const{sql:t,poolPromise:a,getConnected:r,queryPool:n,connectWithLogin:o,connectWithCookie:i}=s(598);e.exports={sql:t,poolPromise:a,getConnected:r,queryPool:n,connectWithLogin:o,connectWithCookie:i}}if("PG"===a){const{query:t,getConnected:a}=s(287);e.exports={sql:()=>!1,poolPromise:()=>!1,getConnected:a,queryPool:t,connectWithLogin:()=>!1,connectWithCookie:()=>!1}}},657:(e,t,s)=>{const a=s(907),{sql:r,poolPromise:n}=s(38);e.exports=new class{async getYear(e,t){try{const s="\n            SELECT     id_a_year, p32\n            FROM         a_year\n            WHERE     (id_a_year > 11 AND id_a_year < 24)",r=await n(),{id_avn_user:o}=await a.GET_USER(e);let i=(await r.query(s)).recordset;return t.json({status:300,message:"yearList OK",result:i})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getSemester(e,t){try{const e="SELECT id_w_s, p42 from w_s ORDER BY ws_sort",s=await n(),a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getFaculty(e,t){try{const e="\n            SELECT TOP 1000 [id_faculty]\n            ,[p23-2] as value\n            FROM [AVN].[dbo].[faculty]",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getEducForm(e,t){try{const e="\n        Select 0 as id_f_educ, ' -Для всех ведомостей- ' as p108 \n        Union all  \n        Select Distinct AVN.dbo.f_educ.id_f_educ, p108\n        From  dbo.f_educ \n        ORDER BY p108",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getCourse(e,t){try{const e="\n        SELECT     id_a_year, p32\n        FROM         a_year\n        WHERE     (id_a_year > 15 AND id_a_year < 24)",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getEvalRule(e,t){try{const e="\n        select distinct id_ebe_var\n        from avn.dbo.ebe order by id_ebe_var ",s=await n();let a=(await s.query(e)).recordset.map(((e,t)=>({id:t+1,...e})));return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getStateForm(e,t){try{const e="\n        SELECT     id_a_year, p32\n        FROM         a_year\n        WHERE     (id_a_year > 15 AND id_a_year < 24)",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getStructUnit(e,t){try{const e="\n        SELECT     id_a_year, p32\n        FROM         a_year\n        WHERE     (id_a_year > 15 AND id_a_year < 24)",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getTeachers(e,t){try{const e="\n        SELECT TOP 1000 [id_teacher], [p26] + ' ' + [p27] + ' ' + [p28] as 'Teachers'\n\t    FROM [AVN].[dbo].[teacher]\n        ORDER BY Teachers",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getAppointments(e,t){try{const e="\n        SELECT     id_a_year, p32\n        FROM         a_year\n        WHERE     (id_a_year > 15 AND id_a_year < 24)",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getStatementForms(e,t){try{const e="\n        SELECT     id_a_year, p32\n        FROM         a_year\n        WHERE     (id_a_year > 15 AND id_a_year < 24)",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getDisciplines(e,t){try{const e="\n        SELECT TOP 1000 [id_discipline]\n        ,[p34]\n        FROM [AVN].[dbo].[discipline]",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getKafedra(e,t){try{const e="\n        SELECT TOP 1000 [id_kafedra],[f1]\n            FROM [AVN].[dbo].[kafedra]\n            ORDER BY [f1]",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getFormControl(e,t){try{const e="\n        SELECT     id_a_year, p32\n        FROM         a_year\n        WHERE     (id_a_year > 15 AND id_a_year < 24)",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getStream(e,t){try{const e="\n        SELECT     id_a_year, p32\n        FROM         a_year\n        WHERE     (id_a_year > 15 AND id_a_year < 24)",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getEducFormAll(e,t){try{try{const e="\n            SELECT TOP (100) PERCENT dbo.f_educ.id_f_educ, dbo.f_educ.p108, dbo.f_educ.o_z  AS id_o_z  \n            FROM dbo.f_educ \n            INNER JOIN dbo.specialityV ON dbo.f_educ.p108 = dbo.specialityV.p108  \n            GROUP BY dbo.f_educ.p108, dbo.f_educ.id_f_educ, dbo.f_educ.o_z  \n            ORDER BY dbo.f_educ.o_z \n            ",s=await n();let a=(await s.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:a})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}catch(e){}}async postEducForm(e,t,s){try{const s=e.body,a=`\n        SELECT DISTINCT dbo.f_educ.id_f_educ ,dbo.f_educ.p108 \n        FROM dbo.educ_sh INNER JOIN dbo.com_sfe ON dbo.educ_sh.id_speciality = dbo.com_sfe.id_speciality \n                        INNER JOIN dbo.f_educ ON dbo.com_sfe.id_f_educ = dbo.f_educ.id_f_educ \n                        INNER JOIN dbo.semester ON dbo.educ_sh.id_semester = dbo.semester.id_semester \n        WHERE dbo.educ_sh.isSelect = ${s.a}\n        AND dbo.educ_sh.id_kafedra = ${s.c} \n        AND dbo.educ_sh.id_a_year = ${s.b} \n        AND dbo.semester.id_w_s = ${s.d} \n        ORDER BY dbo.f_educ.p108`,r=await n();let o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postTeacher(e,t,s){try{const s=e.body,a=`\n        SELECT DISTINCT dbo.RRNKkrdt.id_teacher, dbo.t_fio.t_fio \n        FROM    dbo.RRNKkrdt \n                INNER JOIN dbo.t_fio ON dbo.RRNKkrdt.id_teacher = dbo.t_fio.id_teacher \n        WHERE   dbo.RRNKkrdt.id_a_year = ${s.year} \n            AND dbo.RRNKkrdt.id_kafedra = ${s.kafedra} \n            AND dbo.RRNKkrdt.id_w_s = ${s.semester} \n            AND dbo.RRNKkrdt.id_o_z = 0\n            AND ISNULL(id_ebe_var, -1) <> -1\n            ORDER BY dbo.t_fio.t_fio`,r=await n();let o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postTeacherPotok(e,t){try{const s=e.body,a=`\n        SELECT id_rrnkKrdt, IsNull(dop_potokname,'')as potokname, subgroup\n          FROM dbo.RRNKkrdt\n        Where id_a_year = ${s.year}\n        AND  id_w_s = ${s.semester}\n        AND  id_f_educ = ${s.educForm}  \n        AND  id_kafedra = ${s.kafedra} \n        AND  id_discipline = ${s.discipline} \n        AND  id_examination = ${s.formControl} \n        AND  id_teacher = ${s.teacher} \n        AND  id_o_z = ${s.appointment}`,r=await n();let o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postDiscipline(e,t,s){try{const s=e.body,a=`\n        SELECT * FROM ( \n            SELECT DISTINCT dbo.educ_sh.id_discipline, dbo.discipline.p34 AS Discipline, dbo.f_educ.id_f_educ \n            FROM         dbo.educ_sh\tINNER JOIN dbo.discipline ON dbo.educ_sh.id_discipline = dbo.discipline.id_discipline \n                                        INNER JOIN dbo.semester ON dbo.educ_sh.id_semester = dbo.semester.id_semester \n                                        INNER JOIN dbo.com_sfe ON dbo.educ_sh.id_speciality = dbo.com_sfe.id_speciality \n                                        INNER JOIN dbo.f_educ ON dbo.com_sfe.id_f_educ = dbo.f_educ.id_f_educ \n            WHERE\t\tdbo.educ_sh.id_kafedra = ${Number(s.kafedra)} \n                    AND dbo.educ_sh.id_a_year = ${Number(s.year)} \n                    AND dbo.semester.id_w_s = ${Number(s.semester)} \n                    AND dbo.educ_sh.isSelect =  ${Number(s.appointment)}\n                    AND dbo.f_educ.id_f_educ = ${Number(s.educForm)} \n            UNION SELECT DISTINCT dbo.RRNKkrdt.id_discipline, dbo.discipline.p34 AS Discipline, dbo.f_educ.id_f_educ \n            FROM         dbo.com_sfe\tINNER JOIN dbo.f_educ ON dbo.com_sfe.id_f_educ = dbo.f_educ.id_f_educ \n                                        INNER JOIN dbo.educ_sh ON dbo.com_sfe.id_speciality = dbo.educ_sh.id_speciality \n                                        INNER JOIN dbo.RRNKkrdt \n                                        INNER JOIN dbo.discipline ON dbo.RRNKkrdt.id_discipline = dbo.discipline.id_discipline ON dbo.educ_sh.id_discipline = dbo.discipline.id_discipline \n                                        WHERE\t\tdbo.RRNKkrdt.id_kafedra = ${Number(s.kafedra)} \n                                                AND dbo.RRNKkrdt.id_a_year = ${Number(s.year)}\n                                                AND dbo.RRNKkrdt.id_teacher = ${Number(s.teacher)} \n                                                AND dbo.RRNKkrdt.id_w_s = ${Number(s.semester)}\n                                                AND dbo.f_educ.id_f_educ = ${Number(s.educForm)})\n                                                 as T order by discipline\n`,r=await n();let o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postSemester(e,t,s){try{const s=e.body;if(!isNaN(s.appointment)&&!isNaN(s.course)){const e=`\n            EXEC GetSemesterOrWs @isPotok=${s.appointment},\n            @id_rate=${s.course}`,a=await n();let r=(await a.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:r})}}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postFormControl(e,t){try{const s=e.body,a=`\n                    SELECT T.* \n                        FROM (\n                            SELECT DISTINCT dbo.educ_sh.id_examination, dbo.examination.p30 as Examination, dbo.f_educ.id_f_educ \n                            FROM         dbo.educ_sh INNER JOIN dbo.examination ON dbo.educ_sh.id_examination = dbo.examination.id_examination \n                            INNER JOIN dbo.semester ON dbo.educ_sh.id_semester = dbo.semester.id_semester \n                            INNER JOIN dbo.com_sfe ON dbo.educ_sh.id_speciality = dbo.com_sfe.id_speciality \n                            INNER JOIN dbo.f_educ ON dbo.com_sfe.id_f_educ = dbo.f_educ.id_f_educ \n                            WHERE     dbo.educ_sh.id_kafedra = ${s.kafedra} \n                            AND dbo.educ_sh.id_a_year = ${s.year}\n                            AND dbo.semester.id_w_s = ${s.semester}\n                            AND dbo.educ_sh.id_discipline = ${s.discipline} \n                            AND dbo.educ_sh.isSelect = ${s.appointment}\n                            AND dbo.f_educ.id_f_educ =${s.educForm} \n                            UNION SELECT     dbo.RRNKkrdt.id_examination, dbo.examination.p30 \n                            AS Examination, dbo.com_sfe.id_f_educ FROM         \n                        dbo.RRNKkrdt INNER JOIN dbo.examination ON dbo.RRNKkrdt.id_examination = dbo.examination.id_examination \n                        INNER JOIN dbo.educ_sh ON dbo.RRNKkrdt.id_a_year = dbo.educ_sh.id_a_year \n                        AND dbo.RRNKkrdt.id_semester = dbo.educ_sh.id_semester \n                        AND               dbo.RRNKkrdt.id_teacher = dbo.educ_sh.id_teacher \n                        AND dbo.RRNKkrdt.id_discipline = dbo.educ_sh.id_discipline \n                        AND               dbo.RRNKkrdt.id_kafedra = dbo.educ_sh.id_kafedra \n                        INNER JOIN               dbo.com_sfe ON dbo.educ_sh.id_speciality = dbo.com_sfe.id_speciality  \n                        WHERE     dbo.RRNKkrdt.id_kafedra = ${s.kafedra}\n                        AND dbo.RRNKkrdt.id_a_year = ${s.year}\n                        AND dbo.RRNKkrdt.id_teacher =  ${s.teacher} \n                        AND dbo.RRNKkrdt.id_w_s = ${s.semester}\n                        AND dbo.RRNKkrdt.id_discipline = ${s.discipline} \n                        AND dbo.com_sfe.id_f_educ = ${s.educForm})\n                    AS T ORDER BY T.Examination`,r=await n();let o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postStream(e,t){try{const s=e.body,a=`\n        SELECT *  \n        FROM rrnkKrdt rrnk \n        where  rrnk.id_w_s = ${s.semester} \n        AND  rrnk.id_discipline = ${s.discipline} \n        AND  rrnk.id_teacher = ${s.teacher} \n        AND  rrnk.id_a_year = ${s.year} \n        AND  rrnk.id_kafedra = ${s.kafedra} \n        AND  rrnk.id_examination = ${s.exam} \n        AND  rrnk.id_f_educ = ${s.educForm} \n        AND  rrnk.id_o_z = ${s.appointment}`,r=await n();return(await r.query(a)).recordset,t.json({status:300,message:"yearList OK",result:formControl})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postStreamYear(e,t,s){try{const s=`\n        SELECT DISTINCT id_a_year, p32 \n        FROM RRNKForIndividualPermiss \n        WHERE id_faculty=${e.body.faculty}`,a=await n();return(await a.query(s)).recordset,t.json({status:300,message:"yearList OK",result:formControl})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postStreamSemester(e,t){try{const s=e.body,a=`\n        SELECT DISTINCT id_semester, p43\n        FROM RRNKForIndividualPermiss\n        WHERE id_a_year =${s.year} AND  id_faculty=${s.faculty}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postStreamGroup(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT\n                id_group, p20\n                FROM RRNKForIndividualPermiss\n                WHERE (id_a_year=${Number(s.year)}) AND\n                (id_semester=${Number(s.semester)}) AND\n                id_faculty=${Number(s.faculty)}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postStreamTeacher(e,t){try{const s=e.body,a=`\n            SELECT DISTINCT id_teacher,t_fio\n            FROM RRNKForIndividualPermiss\n            WHERE  id_a_year=${Number(s.year)} AND\n            id_semester=${Number(s.semester)} AND\n            id_group=${Number(s.group)} AND\n            id_faculty=${Number(s.faculty)}\n            ORDER BY t_fio`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postStreamStatment(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT id_semester, p43\n                FROM RRNKForIndividualPermiss\n                WHERE id_a_year =${s.year} AND  id_faculty=${s.faculty}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postFacultyEducForm(e,t){try{const s=`\n                Select Distinct AVN.dbo.f_educ.id_f_educ, p108\n                From\tAVN.dbo.f_educ INNER JOIN        \n                AVN.dbo.com_sfe ON AVN.dbo.f_educ.id_f_educ=AVN.dbo.com_sfe.id_f_educ \n                WHERE id_faculty= ${e.body.faculty} \n                ORDER BY p108`,a=await n(),r=(await a.query(s)).recordset;return t.json({status:300,message:"yearList OK",result:r})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postFaculty(e,t){try{const s=`\n            Select Distinct AVN.dbo.f_educ.id_f_educ, p108\n            From\tAVN.dbo.f_educ INNER JOIN        \n                    AVN.dbo.com_sfe ON AVN.dbo.f_educ.id_f_educ=AVN.dbo.com_sfe.id_f_educ \n            WHERE id_faculty= ${e.body.faculty} \n            ORDER BY p108`,a=await n(),r=(await a.query(s)).recordset;return t.json({status:300,message:"yearList OK",result:r})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postFacultyYear(e,t){try{const s=`\n                SELECT DISTINCT id_a_year, p32 FROM RRNKForIndividualPermiss WHERE id_faculty=${e.body.faculty}`,a=await n(),r=(await a.query(s)).recordset;return t.json({status:300,message:"yearList OK",result:r})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postFacultySemester(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT id_semester, p43\n                FROM    RRNKForIndividualPermiss\n                WHERE id_a_year =${s.year} AND  id_faculty=${s.faculty}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postFacultyModule(e,t){try{const s=`\n                SELECT * FROM\n                (SELECT (case when pole_mark_mag = 'm1' then 1\n                when pole_mark_mag = 'm2' then 2\n                when pole_mark_mag = 'm3' then 3\n                when pole_mark_mag = 'm4' then 4\n                when pole_mark_mag = 'm5' then 5\n                when pole_mark_mag = 'm6' then 6\n                when pole_mark_mag = 'm7' then 7\n                when pole_mark_mag = 'm8' then 8\n                when pole_mark_mag = 'm9' then 9\n                when pole_mark_mag = 'm10' then 10\n                when pole_mark_mag = 'm11' then 11\n                when pole_mark_mag = 'm12' then 12\n                when pole_mark_mag = 'dop' then 13\n                when pole_mark_mag = 'dop2' then 14 END) as id_modul_x, [name_pole], [id_ebe_var]\n                FROM [AVN].[dbo].[est_config] \n                WHERE [pole_mark_mag]<>'''' AND [id_ebe_var]= ${e.body.evalRule} ) as t\n                WHERE id_modul_x IS NOT NULL`,a=await n(),r=(await a.query(s)).recordset;return t.json({status:300,message:"yearList OK",result:r})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postSpecSpecial(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT TOP (100) PERCENT dbo.com_sfe.id_speciality, dbo.special.[p25-2]\n                FROM dbo.com_sfe INNER JOIN dbo.special ON dbo.com_sfe.id_special = dbo.special.id_special  \n                WHERE dbo.com_sfe.id_faculty=${s.faculty} AND   dbo.com_sfe.id_f_educ =${s.educForm} \n                ORDER BY dbo.special.[p25-2]`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postSpecSemester(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT id_semester, p43\n                FROM RRNKForIndividualPermiss\n                WHERE id_a_year =${s.year} AND  id_faculty=${s.faculty}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postDiscpEducForm(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT id_semester, p43\n                FROM RRNKForIndividualPermiss\n                WHERE id_a_year =${s.year} AND  id_faculty=${s.faculty}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postSubjEducForm(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT id_semester, p43\n                FROM RRNKForIndividualPermiss\n                WHERE id_a_year =${s.year} AND  id_faculty=${s.faculty}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async bygroupSemester(e,t){try{const s=e.body;if(0==s.potok&&s.course){const e=`\n                EXEC GetSemesterOrWs @isPotok=${s.potok},\n                @id_rate=${s.course}`,a=await n(),r=(await a.query(e)).recordset;return t.json({status:300,message:"yearList OK",result:r})}}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async bygroupGroup(e,t){try{const s=e.body,a=`\n                SELECT [group].id_group, [group].p20 \n                FROM [group] INNER JOIN g_r_y ON [group].id_group = g_r_y.id_group \n                WHERE\t[group].id_faculty = ${s.faculty} \n                       AND g_r_y.id_a_year = ${s.year} \n                       AND g_r_y.id_rate = ${s.course} \n               ORDER BY [group].p20`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async bygroupGroupByCycle(e,t){try{const s=e.body,a=`\n                SELECT [group].id_group, [group].p20 \n                FROM [group] INNER JOIN g_r_y ON [group].id_group = g_r_y.id_group \n                WHERE\t[group].id_faculty = ${s.faculty} \n                        AND g_r_y.id_a_year = ${s.year} \n               ORDER BY [group].p20`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postDisciplineTeach(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT id_discipline, p34\n                FROM RRNKForIndividualPermiss\n                WHERE id_a_year=${s.year} AND\n                    id_teacher=${s.teacher} AND\n                    id_semester=${s.semester} AND\n                    id_group=${s.group} AND\n                    id_faculty=${s.faculty}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async postDisciplineByCycle(e,t){try{const s=e.body,a=`\n                SELECT DISTINCT id_discipline, p34\n                FROM RRNKForIndividualPermiss\n                WHERE id_a_year = ${s.year} \n                AND id_semester = ${s.semester}\n                AND id_faculty = ${s.faculty}`,r=await n(),o=(await r.query(a)).recordset;return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}}},388:(e,t,s)=>{const{sql:a,poolPromise:r}=s(38),n=s(907),o=s(635);var i=s(619);function d(e){return new Date(o(e).format("YYYY-MM-DD HH:mm:ss"))}s(291),o.extend(i),e.exports=new class{async getData(e,t){try{const s=await r(),a=`\n                EXEC GetRRNKPermiss @id_a_year=${e.body.year}`,n=await s.query(a),o=await n.recordset;return o.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getPointData(e,t){try{const s=e.body,a=await r(),n=`SELECT  [id_modulPermiss]\n            ,[id_a_year]\n            ,[begDate]\n            ,[endDate]\n            ,[id_modul]\n            ,[id_semester]\n            ,[id_ebe_var]\n            ,[forPotok]\n            ,[id_f_e]\n            ,[id_f_educ], convert(varchar(20), begDate,104) as begDateStr, convert(varchar(20), endDate,104) as endDateStr \n            FROM [AVN].[dbo].[ModulPermiss]\n            WHERE id_a_year = ${s.year}\n            AND forPotok = ${Number(s.appointment)}\n            AND id_f_e = ${s.statementForm}\n            AND id_ebe_var = ${s.evalRule}\n            AND id_f_educ = ${s.educForm} \n            AND id_semester = ${s.semester}`,o=(await a.query(n)).recordset;return o.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async regStudDiscipline(e,t){try{const s=e.body,a=await r(),n=`\n                SELECT     id_date_DFS, id_a_year, id_w_s, id_f_educ, begDate, endDate, \n                convert(varchar(20), begDate,104) as begDateStr, convert(varchar(20), endDate,104) as endDateStr \n                FROM   dbo.DATE_reg_DFS \n                WHERE   id_a_year =${s.year}  \n                AND id_w_s = ${s.semester}\n            `,o=(await a.query(n)).recordset;return o.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async regStudSubj(e,t){try{const s=e.body,a=await r(),n=`\n                SELECT *, startDate as begDate, CONVERT(varchar(20), startDate, 104) as begDateStr, CONVERT(varchar(20), endDate, 104)as endDateStr\n                FROM [AVN].[dbo].[T_DisciplineForStudentPermissions] \n                WHERE id_a_year=${s.year} \n                AND id_faculty=${s.faculty}\n                AND o_z=${s.educForm}`,o=(await a.query(n)).recordset;return o.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async educByCycle(e,t){try{return e.body,t.json({status:300,message:"yearList OK",result:[{id_individualModulPermiss:10838,id_teacher:747,id_group:1741,id_discipline:3039,id_a_year:14,begDate:"2022-02-17T02:00:00.000Z",endDate:"2022-02-25T02:00:00.000Z",id_modul:3,id_semester:1,id_ebe_var:7,id_f_e:4,begDateStr:"17.02.2022",endDateStr:"25.02.2022"},{id_individualModulPermiss:10839,id_teacher:747,id_group:1741,id_discipline:3039,id_a_year:14,begDate:"2022-02-17T02:00:00.000Z",endDate:"2022-03-05T02:00:00.000Z",id_modul:1,id_semester:1,id_ebe_var:7,id_f_e:4,begDateStr:"17.02.2022",endDateStr:"05.03.2022"},{id_individualModulPermiss:10840,id_teacher:747,id_group:1741,id_discipline:3039,id_a_year:14,begDate:"2022-02-02T02:00:00.000Z",endDate:"2022-03-05T02:00:00.000Z",id_modul:13,id_semester:1,id_ebe_var:7,id_f_e:4,begDateStr:"02.02.2022",endDateStr:"05.03.2022"}]})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async educProcTeach(e,t){const s=e.body;if(1==s.appointment)try{const e=await r(),a=`\n            SELECT *, CONVERT(varchar(20), begDate, 104) as begDateStr, CONVERT(varchar(20), endDate, 104)as endDateStr\n            FROM IndividualModulPermiss\n            WHERE id_a_year=${s.year} AND\n            id_semester=${s.semester} AND\n            id_group=${s.group} AND\n            id_teacher=${s.teacher} AND\n            id_ebe_var=${s.evalRule} AND\n            id_f_e=${s.statementForm}`,n=(await e.query(a)).recordset;return n.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:n})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}else try{const e=await r(),a=`\n            SELECT *, CONVERT(varchar(20), begDate, 104) as begDateStr, CONVERT(varchar(20), endDate, 104)as endDateStr\n            FROM [AVN].[dbo].[IndividualModulPermissPotok] \n            WHERE  id_discipline = ${s.discipline}\n            AND   id_w_s= ${s.semester} \n            AND   id_teacher= ${s.teacher} \n            AND   id_year= ${s.year} \n            AND   id_f_e= ${s.statementForm}`,n=(await e.query(a)).recordset;return n.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:n})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async educProcSpec(e,t){try{const s=e.body,a=await r(),n=`\n                SELECT *, convert(varchar(20), begDate,104) as begDateStr, convert(varchar(20), endDate,104) as endDateStr\n                FROM IndividualModulPermissBySpeciality  \n                WHERE  id_speciality=${s.speciality} \n                AND id_a_year=${s.year}\n                AND id_semester=${s.semester} \n                AND id_ebe_var=${s.evalRule}\n                AND id_f_e=${s.statementForm}\n                `,o=(await a.query(n)).recordset;return o.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async educProcFacul(e,t){try{const s=e.body,a=await r(),n=`\n                exec sp_executesql N'SELECT * , CONVERT(varchar(20), begDate, 104) as begDateStr, CONVERT(varchar(20), endDate, 104)as endDateStr\n                FROM IndividualModulPermissByFuckulty\n                WHERE\tid_a_year=@P1 AND\n                    id_semester=@P2  AND\n                    id_faculty=@P3 AND\n                    id_f_educ=@P4 AND\n                    id_ebe_var=@P5 AND\n                                id_f_e=@P6\n                ',N'@P1 int,@P2 int,@P3 int,@P4 int,@P5 int,@P6 int',${s.year},${s.semester},${s.faculty},\n                ${s.educForm},${s.evalRule},${s.statementForm}`,o=(await a.query(n)).recordset;return o.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async byGroup(e,t){try{const s=e.body;{const e=await r(),a=`\n                SELECT *, beg_date as begDate, end_date as endDate, convert(varchar(20), beg_date,104) as begDateStr, convert(varchar(20), end_date,104) as endDateStr   \n                FROM IndividualModulPermissGROUP \n                WHERE id_a_year=${s.year} \n                AND id_semester=${s.semester} \n                AND id_group=${s.group} \n                AND id_ebe_var=${s.grade} \n                AND id_f_e=${s.statementForm}`,n=(await e.query(a)).recordset;return n.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:n})}}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async budgetData(e,t){try{const s=e.body;{const e=await r(),a=`\n                Select *, convert(varchar(20), Smeta_date, 104) as begDateStr\n                FROM  Smeta_date \n                WHERE id_a_year = ${s.year}`,n=(await e.query(a)).recordset;return n.forEach((e=>{const t=e.begDateStr.split(".").reverse().join("-");e.begDate=d(t);const s=e.endDateStr.split(".").reverse().join("-");e.endDate=d(s)})),t.json({status:300,message:"yearList OK",result:n})}}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updateDate(e,t){e.body,t.json({da:"net"})}async setNewDate(e,t){try{const s=e.body,a=await r(),n=`\n            UPDATE "rrnkPermiss" \n            SET "begDate"='${s.a}',"endDate"='${s.e}' \n            WHERE "id_a_year"=${s.year} `,o=await a.query(n);return t.json({status:300,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async getPointDataDisp(e,t){try{const s=e.body,a=await r(),o=`\n                SELECT     id_date_DFS, id_a_year, id_w_s, id_f_educ, begDate, endDate, \n                convert(varchar(20), begDate,104) as begDateStr, convert(varchar(20), endDate,104) as endDateStr \n                FROM   dbo.DATE_reg_DFS \n                WHERE   id_a_year =${s.year}  \n                AND id_w_s = ${s.semester}\n                AND id_f_educ = ${s.formProp}\n                `,i=await a.query(o),{id_avn_user:d}=(await i.recordset,await n.GET_USER(e)),u=`\n                    exec sp_executesql N'SET NOCOUNT OFF; INSERT INTO "AVN"."dbo"."DATE_reg_DFS" \n                    ("id_a_year","id_w_s","id_f_educ","begDate","endDate","id_AVN_user") \n                    VALUES (@P1,@P2,@P3,@P4,@P5,@P6); \n                    SELECT SCOPE_IDENTITY() AS SCOPE_ID_COLUMN',\n                    N'@P1 int,@P2 int,@P3 int,@P4 datetime,@P5 datetime,@P6 int',\n                    ${s.year},${s.semester}, ${s.formProp},'${s.dateStart}','${s.dateEnd}',${d}`,c=await a.query(u);return t.json({status:201,message:"yearList OK",result:c})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async regStudSubjSetNew(e,t){try{const s=e.body;if(s.dateEnd&&s.dateStart&&!isNaN(s.educForm)&&s.faculty&&s.formProp&&s.year){const e=await r(),a=`\n                    INSERT INTO "AVN"."dbo"."T_DisciplineForStudentPermissions" \n                    ("id_a_year","id_w_s","startDate","endDate","id_faculty","o_z") \n                    VALUES (${s.year},${s.formProp},\n                    '${s.dateStart}',\n                    '${s.dateEnd}',${s.faculty},${s.educForm})`,n=await e.query(a);return t.json({status:201,message:"yearList OK",result:n})}}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setPointData(e,t){const s=e.body;try{(await r()).input("param1",a.Int,Number(s.year)).input("param2",a.DateTime,new Date(s.dateStart)).input("param3",a.DateTime,new Date(s.dateEnd)).input("param4",a.Int,Number(s.formProp)).input("param5",a.Int,Number(s.semester)).input("param6",a.Int,Number(s.evalRule)).input("param7",a.Bit,Number(s.appointment)).input("param8",a.Int,Number(s.statementForm)).input("param9",a.Int,Number(s.educForm)).query("insert into ModulPermiss (id_a_year, begDate,endDate,id_modul,  id_semester, id_ebe_var, forPotok, id_f_e, id_f_educ) \n            values (@param1, @param2, @param3, @param4, @param5, @param6, @param7, @param8, @param9)",(function(e,s){return e&&(console.log(e.message),t.send(e)),t.json({status:201,message:"yearList OK",data:s,result:[]})}))}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setNewEdupProc(e,t){try{const s=e.body;if(s.dateEnd&&s.dateStart&&s.educForm&&s.faculty&&s.semester&&s.year){const e=await r(),a=`\n                exec sp_executesql N'SET NOCOUNT OFF; INSERT INTO "AVN".."IndividualModulPermiss" \n                ("id_teacher","id_group","id_discipline","id_a_year","begDate",\n                "endDate","id_modul","id_semester","id_ebe_var","id_f_e") \n                VALUES (@P1,@P2,@P3,@P4,@P5,@P6,@P7,@P8,@P9,@P10); \n                SELECT SCOPE_IDENTITY() AS SCOPE_ID_COLUMN',N'@P1 int,\n                @P2 int,@P3 int,@P4 int,@P5 datetime,@P6 datetime,@P7 int,\n                @P8 int,@P9 int,@P10 int',\n                1941,2513,6517,17,'2021-12-08 00:00:00','2021-12-08 00:00:00',2,3,11,5\n                ${s.teacher},${s.group},${s.discipline},${s.year}, ${s.group},${s.dateStart},${s.dateEnd},\n                ${s.modul},\n                ${s.semester},${s.evalRule},${s.educForm}\n                `,n=(await e.query(a),`\n                    SELECT * \n                    FROM [AVN].[dbo].[T_DisciplineForStudentPermissions] \n                    WHERE id_a_year=${s.year} \n                    AND id_faculty=${s.faculty}\n                    AND o_z=${s.educForm}\n                `),o=(await e.query(n)).recordset[0];return t.json({status:201,message:"yearList OK",result:o})}}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setNewEdupProcStream(e,t){try{const s=e.body;if(s.dateEnd&&s.dateStart&&s.educForm&&s.faculty&&s.semester&&s.year){const e=await r(),a=`\n                exec sp_executesql N'SET NOCOUNT OFF; INSERT INTO "AVN"."dbo"."IndividualModulPermissPotok" \n                ("id_teacher",\n                "id_year",\n                "id_discipline",\n                "id_modul",\n                "begDate",\n                "endDate",\n                "vid_rrnk",\n                "id_rrnk_all",\n                "subgroup",\n                "id_f_e",\n                "id_w_s") \n                VALUES (@P1,@P2,@P3,@P4,@P5,@P6,@P7,@P8,@P9,@P10,@P11); \n                SELECT SCOPE_IDENTITY() AS SCOPE_ID_COLUMN',N'@P1 int,@P2 int,@P3 int,@P4 int,\n                @P5 datetime,@P6 datetime,@P7 int,@P8 int,@P9 int,@P10 int,@P11 int',\n                743,16,6475,1,'2021-12-10 00:00:00','2021-12-05 00:00:00',2,37936,22,4,1\n                ${s.teacher},${s.year},${s.discipline},${s.modul}, ${s.dateStart},${s.dateEnd},${s.dateEnd},\n                ${s.modul},\n                ${s.gruop},${s.evalRule},${s.semester}\n                \n                `,n=(await e.query(a),`\n                    SELECT * \n                    FROM [AVN].[dbo].[T_DisciplineForStudentPermissions] \n                    WHERE id_a_year=${s.year} \n                    AND id_faculty=${s.faculty}\n                    AND o_z=${s.educForm}\n                `),o=await e.query(n);return o.recordset,t.json({status:201,message:"yearList OK",result:o})}}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setNewFaculty(e,t){try{const s=e.body;if(s.faculty&&s.year&&s.semester&&s.formProp&&s.dateStart&&s.dateEnd&&s.educForm&&s.evalRule&&s.statementForm){const e=await r(),a=`\n                INSERT INTO "AVN".."IndividualModulPermissByFuckulty" \n                ("id_faculty","id_a_year","id_semester","id_modul","begDate","endDate","id_f_educ","id_ebe_var","id_f_e") \n                VALUES (${s.faculty},${s.year},${s.semester},${s.formProp},'${s.dateStart}','${s.dateEnd}',${s.educForm},${s.evalRule},${s.statementForm}); \n                `,n=(await e.query(a),`\n                exec sp_executesql N'SELECT * , CONVERT(varchar(20), begDate, 104) as begDateStr, CONVERT(varchar(20), endDate, 104)as endDateStr\n                FROM IndividualModulPermissByFuckulty\n                WHERE\tid_a_year=@P1 AND\n                    id_semester=@P2  AND\n                    id_faculty=@P3 AND\n                    id_f_educ=@P4 AND\n                    id_ebe_var=@P5 AND\n                                id_f_e=@P6\n                ',N'@P1 int,@P2 int,@P3 int,@P4 int,@P5 int,@P6 int',${s.year},${s.semester},${s.faculty},\n                ${s.educForm},${s.evalRule},${s.statementForm}`),o=await e.query(n);return o.recordset,t.json({status:201,message:"yearList OK",result:o})}}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setNewSpec(e,t){try{const s=e.body,a=await r(),n=`\n            INSERT INTO "AVN"."dbo"."IndividualModulPermissBySpeciality" \n            ("id_speciality","id_a_year","id_semester","id_modul","begDate","endDate","id_ebe_var","id_f_e") \n            VALUES (${s.speciality},${s.year},${s.semester},${s.formProp},'${s.dateStart}','${s.dateEnd}',${s.evalRule},${s.statementForm}) \n            `,o=await a.query(n);return t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setNewByGroup(e,t){try{const s=e.body,{id_avn_user:a}=await n.GET_USER(e),o=await r(),i=`\n            INSERT INTO "AVN".."IndividualModulPermissGROUP" \n            ("id_group","id_a_year","id_semester","beg_date","end_date","id_modul","id_f_e","id_ebe_var","id_AVN_user") \n            VALUES (${s.group},${s.year},${s.semester},\n                    '${s.dateStart}','${s.dateEnd}',${s.formProp},\n                    ${s.statementForm},${s.grade},${a})`,d=await o.query(i);return t.json({status:201,message:"yearList OK",result:d})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setBudgetData(e,t){try{const s=e.body,a=await r(),{id_avn_user:o}=await n.GET_USER(e),i=`\n                INSERT INTO "AVN".."Smeta_date" \n                ("id_a_year","Smeta_date","id_AVN_user") \n                VALUES (${s.year},'${s.dateStart}',${o}); `,d=await a.query(i);return t.json({status:201,message:"yearList OK",result:d})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updKafedraData(e,t){try{const s=e.body,a=await r(),n=`\n            UPDATE "AVN".."rrnkPermiss" \n            SET "begDate"='${s.startDate}',\n                "endDate"='${s.endDate}' \n            WHERE\t"id_rrnkPermiss"=${s.uid} \n                AND "id_a_year"=${s.year} \n                AND "id_kafedra"=${s.id} \n            `,o=await a.query(n);return await o.recordset,t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updFacultyData(e,t){try{const s=e.body,a=await r(),n=`\n            UPDATE IndividualModulPermissByFuckulty\n            SET "id_modul"=${s.prop},\n                "begDate"='${s.startDate}',\n                "endDate"='${s.endDate}'\n            WHERE "id_individualModulPermissByFuckulty"=${s.uid}\n                    AND "id_faculty"=${s.faculty}\n                    AND "id_a_year"=${s.year}\t    \n                    AND "id_semester"=${s.semester} \n                    AND "id_f_educ"=${s.educForm} \n                    AND "id_ebe_var"=${s.evalRule} \n                    AND "id_f_e"=${s.statementForm}\n            `,o=await a.query(n);return await o.recordset,t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updSubjData(e,t){try{const s=e.body,a=await r(),n=`\n            UPDATE "AVN"."dbo"."T_DisciplineForStudentPermissions" \n            SET "id_w_s"=${s.prop},"startDate"='${s.startDate}',"endDate"='${s.endDate}' \n            WHERE\t"id_disciplineForStudentPermission"=${s.uid} \n                    AND "id_a_year"=${s.year} \n                    AND "id_w_s"=${s.smstrId} \n                    AND "id_faculty"=${s.faculty} \n                    AND "o_z"=${s.educForm}\n            `,o=await a.query(n);return t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updSpecData(e,t){try{const s=e.body,a=await r(),n=`\n            UPDATE "AVN"."dbo"."IndividualModulPermissBySpeciality" \n            SET \n            "id_modul"=${s.prop},\n            "begDate"='${s.startDate}',\n            "endDate"='${s.endDate}'\n            WHERE "id_IndividualModulPermissBySpeciality"=${s.uid} \n            AND "id_speciality"=${s.speciality} \n            AND "id_a_year"=${s.year} \n            AND "id_semester"=${s.semester} \n            AND "id_modul"=${s.smstrId} \n            AND "id_ebe_var"=${s.evalRule} \n            AND "id_f_e"=${s.statementForm}\n            `,o=await a.query(n);return t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setNewEdupProcTeach(e,t){try{const s=e.body,a=await r(),n=`\n            INSERT INTO "AVN".."IndividualModulPermiss" \n            ("id_teacher","id_group","id_discipline","id_a_year","begDate","endDate","id_modul","id_semester","id_ebe_var","id_f_e") \n            VALUES (${s.teacher},${s.group},${s.formProp2},${s.year},'${s.dateStart}',\n            '${s.dateEnd}',${s.formProp},${s.semester},${s.evalRule},${s.statementForm})\n            `,o=await a.query(n);return t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async setNewEdupProcTeachPotok(e,t){try{const s=e.body,a=await r(),n=`\n            INSERT INTO [AVN].[dbo].[IndividualModulPermissPotok] \n            ( id_discipline, \n                id_w_s, \n                id_teacher, \n                id_year, \n                id_RRNK_all, \n                vid_rrnk, \n                subgroup, \n                id_f_e, \n                id_modul, \n                begDate, \n                endDate) \n            VALUES(${s.discipline},\n                ${s.semester},\n                ${s.teacher},\n                ${s.year},\n                ${s.stream},\n                2,\n                ${s.subGruop},\n                ${s.statementForm},\n                ${s.formProp},\n                '${s.dateStart}',\n                '${s.dateEnd}')`,o=await a.query(n);return t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e.message),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updTeach(e,t){try{const s=e.body,a=await r(),n=`\n                UPDATE "AVN".."IndividualModulPermiss" \n                SET "id_teacher"=${s.teacher},\n                "id_group"=${s.group},\n                "id_discipline"=${s.prop2},\n                "id_a_year"=${s.year},\n                "begDate"='${s.startDate}',\n                "endDate"= '${s.endDate}',\n                "id_modul"=${s.prop},\n                "id_semester"=${s.semester},\n                "id_f_e"=${s.statementForm} \n                WHERE "id_individualModulPermiss"=${s.uid} \n                AND "id_teacher"=${s.teacher} \n                AND "id_group"=${s.group} \n                AND "id_a_year"=${s.year} \n                AND "id_semester"=${s.semester} \n                AND "id_ebe_var"=${s.evalRule} \n                AND "id_f_e"=${s.statementForm} \n                `,o=await a.query(n);return t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updTeachPotok(e,t){try{const s=e.body,a=await r(),n=`\n            UPDATE "AVN"."dbo"."IndividualModulPermissPotok" \n            SET "id_teacher"=${s.teacher},\n            "id_year"=${s.year},\n            "id_discipline"=${s.discipline},\n            "id_modul"=${s.prop},\n            "begDate"='${s.startDate}',\n            "endDate"='${s.endDate}',\n            "id_rrnk_all"=${s.stream},\n            "id_f_e"=${s.statementForm},\n            "id_w_s"=${s.semester} \n            WHERE "id_IndividualModulPermissPotok"=${s.uid} \n            AND "id_teacher"=${s.teacher} \n            AND "id_year"=${s.year} \n            AND "id_discipline"=${s.discipline} \n            AND "id_rrnk_all"=${s.stream} \n            AND "id_f_e"=${s.statementForm} \n            AND "id_w_s"=${s.semester} \n            `,o=await a.query(n);return t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updPoint(e,t){try{const s=e.body,a=await r(),n=`UPDATE ModulPermiss SET \n                "begDate" = '${s.startDate}',\n                "endDate" = '${s.endDate}',\n                "id_modul" = ${s.prop}\n                WHERE "id_modulPermiss" = ${s.uid}\n                AND "id_a_year" = ${s.year} \n                AND "forPotok" = ${s.appointment}\n                AND "id_f_educ" = ${s.educForm}\n                AND "id_f_e" = ${s.statementForm}\n                AND "id_semester" = ${s.semester} \n                AND "id_ebe_var" = ${s.evalRule}`,o=await a.query(n);return t.json({status:201,message:"yearList OK",result:o})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updDiscipline(e,t){try{const s=e.body,a=await r(),{id_avn_user:o}=await n.GET_USER(e),i=`\n                    UPDATE "AVN"."dbo"."DATE_reg_DFS" \n                    SET "id_f_educ"=${s.prop2}, "endDate"='${s.endDate}',\n                    "begDate"='${s.startDate}'\n                    WHERE "id_date_DFS"=${s.uid} \n                    AND "id_a_year"=${s.year} \n                    AND "id_w_s"=${s.semester} \n                    AND "id_AVN_user"=${o}`,d=await a.query(i);return t.json({status:201,message:"yearList OK",result:d})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updBudgetData(e,t){try{const s=e.body,a=await r(),{id_avn_user:o}=await n.GET_USER(e),i=`\n            UPDATE "AVN".."Smeta_date" \n            SET "Smeta_date"=${newDate} \n            WHERE "id_a_year"=${s.year} \n            AND "id_AVN_user"= ${o}  `,d=await a.query(i);return t.json({status:201,message:"yearList OK",result:d})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}async updDateSmeta(e,t){const s=e.body;if(s.startDate)try{const{id_avn_user:a}=await n.GET_USER(e),o=await r(),i=`\n                UPDATE "AVN".."Smeta_date" \n                SET "id_a_year"=${s.year},"Smeta_date"='${s.startDate}'\n                WHERE "id_a_year"=${s.year} \n                AND "id_smeta_date"=${s.uid}\n                AND "id_AVN_user"= ${a}`,d=await o.query(i);return t.json({status:201,message:"yearList OK",result:d})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}else t.send({mess:"property not found"})}async updBygGroup(e,t){const s=e.body;try{const a=await r(),{id_avn_user:o}=await n.GET_USER(e),i=`\n                UPDATE "AVN".."IndividualModulPermissGROUP"\n                SET \n                "beg_date"='${s.startDate}',\n                "end_date"='${s.endDate}',\n                "id_modul"='${s.prop}'\n                WHERE "id_IndividualModulPermissGROUP"=${s.uid} \n                AND "id_group"=${s.group} AND "id_a_year"=${s.year} \n                AND "id_semester"=${s.semester} \n                AND "id_f_e"=${s.statementForm} AND "id_ebe_var"=${s.grade} \n                AND "id_AVN_user"=${o}`,d=await a.query(i);return t.json({status:201,message:"yearList OK",result:d})}catch(e){return console.log(e),t.json({status:1,message:`Неправильный запрос ${e.message}`,result:!1})}}}},907:(e,t,s)=>{s(142).config();const a=process.env.DBTYPE;if("MS"===a){const{LOGIN:t,LOGOUT:a,CHECK_PERM:r,GET_USER:n,COOKIE_NAME:o}=s(67);e.exports={LOGIN:t,LOGOUT:a,CHECK_PERM:r,GET_USER:n,COOKIE_NAME:o}}if("PG"===a){const{LOGIN:t,LOGOUT:a,CHECK_PERM:r,GET_USER:n,COOKIE_NAME:o}=s(287);e.exports={LOGIN:t,LOGOUT:a,CHECK_PERM:r,GET_USER:n,COOKIE_NAME:o}}},310:(e,t,s)=>{const a=s(860).Router(),r=s(657),n=s(388);a.get("/years",r.getYear),a.get("/semester",r.getSemester),a.get("/faculty",r.getFaculty),a.get("/course",r.getCourse),a.get("/evalrule",r.getEvalRule),a.get("/stateform",r.getStateForm),a.get("/structunit",r.getStructUnit),a.get("/teachers",r.getTeachers),a.get("/appointment",r.getAppointments),a.get("/statementforms",r.getStatementForms),a.get("/discipline",r.getStatementForms),a.get("/educForm",r.getEducForm),a.get("/kafedra",r.getKafedra),a.get("/formcontrol",r.getFormControl),a.get("/stream",r.getStream),a.get("/alleducform",r.getEducFormAll),a.post("/educform",r.postEducForm),a.post("/teacher",r.postTeacher),a.post("/teacherpotok",r.postTeacherPotok),a.post("/discipline",r.postDiscipline),a.post("/semester",r.postSemester),a.post("/formcontrol",r.postFormControl),a.post("/stream",r.postStream),a.post("/streamyear",r.postStreamYear),a.post("/streamsemester",r.postStreamSemester),a.post("/streamgroup",r.postStreamGroup),a.post("/streamteacher",r.postStreamTeacher),a.post("/streamstatment",r.postStreamTeacher),a.post("/facultyeform",r.postFacultyEducForm),a.post("/facultyyear",r.postFacultyYear),a.post("/facultysemester",r.postFacultySemester),a.post("/facultymodul",r.postFacultyModule),a.post("/specspecial",r.postSpecSpecial),a.post("/specsemester",r.postSpecSemester),a.post("/discpeducform",r.postDiscpEducForm),a.post("/bygroupsemester",r.bygroupSemester),a.post("/bygroupgroup",r.bygroupGroup),a.post("/teachdiscp",r.postDisciplineTeach),a.post("/groupbycycle",r.bygroupGroupByCycle),a.post("/discpbycycle",r.postDisciplineByCycle),a.post("/getdata",n.getData),a.post("/updatedate",n.updateDate),a.post("/setnewdate",n.setNewDate),a.post("/regstuddiscipline",n.regStudDiscipline),a.post("/regstudsubj",n.regStudSubj),a.post("/educbycycle",n.educByCycle),a.post("/educprocteach",n.educProcTeach),a.post("/educprocspec",n.educProcSpec),a.post("/educprocfacul",n.educProcFacul),a.post("/bygroup",n.byGroup),a.post("/budgetdata",n.budgetData),a.post("/getpointdata",n.getPointData),a.post("/setnewdatedisp",n.getPointDataDisp),a.post("/setnewpointdata",n.setPointData),a.post("/setneweducproc",n.setNewEdupProc),a.post("/setneweducprocstream",n.setNewEdupProcStream),a.post("/setneweducprocteach",n.setNewEdupProcTeach),a.post("/setneweducprocteachp",n.setNewEdupProcTeachPotok),a.post("/setnewbudget",n.setBudgetData),a.post("/setnewbygroup",n.setNewByGroup),a.post("/setnewspec",n.setNewSpec),a.post("/setnewfaculty",n.setNewFaculty),a.post("/setnewsubj",n.regStudSubjSetNew),a.put("/updkafedra",n.updKafedraData),a.put("/updpoint",n.updPoint),a.put("/updfaculty",n.updFacultyData),a.put("/updsubj",n.updSubjData),a.put("/updspec",n.updSpecData),a.put("/updteach",n.updTeach),a.put("/updteachpotok",n.updTeachPotok),a.put("/upddiscp",n.updDiscipline),a.put("/updbygroup",n.updBygGroup),a.put("/upddatesmeta",n.updDateSmeta),e.exports=a},598:(e,t,s)=>{const a=s(424);s(142).config();const r=s(659),{md5:n,format:o}=s(492),i=process.env.ID_PROG_ID;let d={user:process.env.DBUSER,password:process.env.DBPASSWORD,server:process.env.DBSERVER,database:process.env.DBNAME,stream:!!parseInt(process.env.DBMS_STREAM),requestTimeout:parseInt(process.env.DBMS_REQUESTTIMEOUT),options:{encrypt:!!parseInt(process.env.DBMS_ENCRYPT)}};const u=new a.ConnectionPool(d).connect().then((e=>(console.log("Connected to Auth MSSQL"),e))).catch((e=>console.log("Database Auth Connection Failed! Bad Config: ",e)));let c=!1,_=null;async function l(e,t){const s=r(e,1),n=r(t,1);return console.log("connectWithSQL",s,n),d={...d,user:s,password:n},_=new a.ConnectionPool(d).connect().then((e=>(console.log("Connected to MSSQL"),c=!0,(e=>{_=e})(e),e.request()))).catch((e=>(console.log("Database Connection Failed! Bad Config: ",e),!1))),_}e.exports={sql:a,poolPromise:()=>null!=_&&_.request(),getConnected:()=>c,queryPool:(e,t)=>null!=_&&_.request().query(o(e,t)),connectWithLogin:async function(e,t){const s=await u;let r=await s.request().input("Login",a.NVarChar,e).input("Passw",a.NVarChar,t).input("NewPassw",a.NVarChar,null).input("AVN_Prog",a.NVarChar,i).input("ip",a.NVarChar,"192.168.100.50").input("compName",a.NVarChar,"TOICHUBEK").input("inputLogin",a.NVarChar,e).input("isWeb",a.NVarChar,"0").input("newPasswLn",a.NVarChar,"4").execute("GET_USER");const{login:n,password:o}=r.recordset[0];return null!=n&&await l(n,o)},connectWithCookie:async function(e){const t=await u;let s=await t.request().input("Cookie",a.NVarChar,e).input("AVN_Prog",a.NVarChar,i).execute("GET_USER_COOKIE");if(s&&s.recordset[0]&&s.recordset[0].login){const{id_avn_user:e,id_user:t,id_role:a,last_login:r,id_session:n,login:o,password:i}=s.recordset[0];return await l(o,i)}return!1}}},287:(e,t,s)=>{const{Pool:a}=s(900);s(142).config();const r=new a({host:process.env.DBSERVER,port:process.env.DBPORT,database:process.env.DBNAME,user:process.env.DBUSER,password:process.env.DBPASSWORD,max:parseInt(process.env.DBPG_MAX_CONNECTIONS),idleTimeoutMillis:parseInt(process.env.DBPG_IDLETIMEOUTMILLLIS),connectionTimeoutMillis:parseInt(process.env.DBPG_CONNECTIONTIMEOUTMILLES)});async function n(e,t){try{return res=await r.query(e,t),res}catch(e){return{err:1}}}e.exports={query:(e,t)=>n(e,t),callback:(e,t,s)=>r.query(e,t,s),getConnected:()=>async function(){try{const{rowCount:e}=await n("SELECT 1",[]);return!!e}catch(e){return console.log("err getConnected ==>",e),!1}}()}},659:e=>{e.exports=(e,t)=>{let s="";for(let a=0;a<e.length;a++){let r=e[a];const n=e.charCodeAt(a);r=String.fromCharCode(n+t),s+=r}return s}},67:(e,t,s)=>{const{md5:a}=s(492);s(142).config();const{sql:r,poolPromise:n,getConnected:o,connectWithLogin:i,connectWithCookie:d}=s(598),u=process.env.COOKIE_NAME,c=process.env.COOKIE_MOBILE,_=process.env.ID_PROG_ID,l=process.env.MAX_AGE;async function m(e){const t=String(e.cookies[u]);if("undefined"==t)return!1;const s=a(t),i=o()?await n():await d(s);if(i&&i.parent.connected){const{recordset:e}=await i.input("Cookie",r.VarChar(50),s).input("AVN_Prog",r.VarChar(32),_).execute("SP_AVN_Cookie_Check");if(e&&e.length)return{...e[0]}}return!1}e.exports.LOGIN=async function(e,t,o,i,d){const m="true"==String(e.cookies[c])?1:0,y=a(await async function(e){const{v4:t}=s(828),a=t();return e.cookie(u,a,{maxAge:l,httpOnly:!0}),a}(t)),p=await n(),{recordset:g}=await p.input("id_avn_user",r.Int,i).input("id_user",r.Int,d).input("id_role",r.Int,o).input("is_mobile",r.Bit,m).input("Cookie",r.VarChar(50),y).input("AVN_Prog",r.VarChar(32),_).execute("SP_AVN_Cookie_Generate");return!(!g||!g.length||!g[0].id_role)},e.exports.LOGOUT=async function(e,t){const s=String(e.cookies[u]);t.clearCookie(u);const a=o()?await n():await d(s),{recordset:i}=await a.input("Cookie",r.VarChar(50),s).input("AVN_Prog",r.VarChar(32),_).execute("SP_AVN_Cookie_Delete");return!!i[0].offline},e.exports.CHECK_PERM=async function(e,t){const s=await m(e);return!(!s||!s.online)||(t.clearCookie(u),!1)},e.exports.GET_USER=m,e.exports.COOKIE_NAME=u},492:(e,t,s)=>{const a=s(113);function r(e){return a.createHash("md5").update(e).digest("hex")}e.exports={format:function(){for(var e=arguments[1].length,t=arguments[0],s=0;s<e;s++){var a="\\{"+s+"\\}",r=new RegExp(a,"g");t=t.replace(r,arguments[1][s])}return t},md5:e=>r(e),generatePassword:()=>function(){for(var e="abcdefghijkmnpqrstuvxyzABCDEFGHJKLMNPQRSTUVXYZ23456789",t="",s=0,a=e.length;s<5;++s)t+=e.charAt(Math.floor(Math.random()*a));return{crypto:r(t),password:t}}(),getPhoneToBase:e=>function(e){return e.replace("0","996")}(e)}},710:e=>{"use strict";e.exports=require("cookie-parser")},635:e=>{"use strict";e.exports=require("dayjs")},291:e=>{"use strict";e.exports=require("dayjs/plugin/timezone")},619:e=>{"use strict";e.exports=require("dayjs/plugin/utc")},142:e=>{"use strict";e.exports=require("dotenv")},860:e=>{"use strict";e.exports=require("express")},644:e=>{"use strict";e.exports=require("express-handlebars")},470:e=>{"use strict";e.exports=require("morgan")},424:e=>{"use strict";e.exports=require("mssql")},423:e=>{"use strict";e.exports=require("path")},900:e=>{"use strict";e.exports=require("pg")},828:e=>{"use strict";e.exports=require("uuid")},113:e=>{"use strict";e.exports=require("crypto")}},t={};function s(a){var r=t[a];if(void 0!==r)return r.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,s),n.exports}(()=>{var e=s(860);s(142).config();var t=s(423),a=s(710),r=s(470),n=s(310),o=e(),i=s(644).create({layoutsDir:t.join(__dirname,"views"),partialsDir:t.join(__dirname,"views/partials"),defaultLayout:"layout",extname:"hbs"});const{md5:d}=s(492),u=s(907),{sql:c,poolPromise:_,queryPool:l,getConnected:m,connectWithLogin:y,connectWithCookie:p}=s(38);global.appRoot=t.resolve(__dirname),o.engine("hbs",i.engine),o.set("view engine","hbs"),o.set("views",t.join(__dirname,"views")),o.use(r("dev")),o.use(e.json()),o.use(e.urlencoded({extended:!1})),o.use(a()),o.use("/avn29/public",e.static(t.join(__dirname,"public")));const g=process.env.ID_PROG_ID;o.all("/",(async function(e,t){await u.CHECK_PERM(e,t)?t.redirect("/home"):t.render("login",{title:"Форма входа",index:!0})})),o.all("/home",(async function(e,t){await u.CHECK_PERM(e,t)?t.render("AVN29",{title:"Форма AVN 29",index:!0}):t.redirect("/login")})),o.all("/logout",(async function(e,t){return await u.LOGOUT(e,t)||t.clearCookie(u.COOKIE_NAME),t.redirect("/login")})),o.get("/login",(async function(e,t){await u.CHECK_PERM(e,t)?t.redirect("/home"):t.render("login",{title:"Форма входа",index:!0})})),o.post("/login",(async function(e,t){const{login:s,password:a}=e.body;if(!s||!a)return t.render("login",{title:"Форма входа",index:!0,message:"Введите логин и пароль!"});const r=d(a),n=m()?await _():await y(s,r);if(0==n)return t.render("login",{title:"Форма входа",index:!0,message:"Логин или пароль не правильно!"});const{recordsets:o}=await n.input("login",c.NVarChar,s).input("password",c.NVarChar,r).input("prog",c.VarChar,g).execute("SP_AVN_Login");if(console.log(o),o&&o.length&&o[0]&&o[0].length){const{id_avn_user:s,id_user:a,id_role:r}=o[0][0];if(await u.LOGIN(e,t,r,s,a))return t.redirect("/home")}return t.render("login",{title:"Форма входа",index:!0,message:"Логин или пароль неправильно!"})})),o.use("/avn29/api",(async function(e,t,s){await u.CHECK_PERM(e,t)?s():t.status(401).json({mess:"Вы не авторизованы",err:!0})}),n),o.use((function(e,t,s){t.render("AVN29")})),o.use((function(e,t,s,a){s.locals.message=e.message,s.locals.error="development"===t.app.get("env")?e:{},s.status(e.status||500),s.render("error")})),o.listen(process.env.PORT,(()=>{}))})(),app={}})();